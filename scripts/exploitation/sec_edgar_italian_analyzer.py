#!/usr/bin/env python3
"""
SEC EDGAR Italian Entity Analyzer
Extracts financial data on Italian entities operating in the US
Focuses on Leonardo DRS, Fincantieri Marine Group, and other subsidiaries
"""

import json
from datetime import datetime, timedelta
from pathlib import Path

OUTPUT_DIR = Path("C:/Projects/OSINT - Foresight/data/raw/sec_filings")
OUTPUT_DIR.mkdir(parents=True, exist_ok=True)

def generate_sec_edgar_queries():
    """Generate SEC EDGAR search queries for Italian entities."""

    entities = [
        {
            "name": "Leonardo DRS, Inc.",
            "cik": "0001698027",
            "ticker": "DRS",
            "parent": "Leonardo S.p.A.",
            "filings_to_extract": ["10-K", "10-Q", "8-K", "DEF 14A"],
            "key_sections": [
                "Item 1. Business",
                "Item 1A. Risk Factors",
                "Item 7. Management's Discussion",
                "Revenue by Geography",
                "Major Customers",
                "Government Contracts"
            ]
        },
        {
            "name": "Fincantieri Marine Group",
            "parent": "Fincantieri S.p.A.",
            "search_terms": ["Fincantieri Marine", "Fincantieri Bay Shipbuilding"],
            "subsidiaries": [
                "Fincantieri Marine Systems",
                "Fincantieri Bay Shipbuilding",
                "Fincantieri ACE Marine"
            ],
            "programs": ["FFG-62", "Constellation class", "LCS"]
        },
        {
            "name": "STMicroelectronics N.V.",
            "cik": "0000932787",
            "ticker": "STM",
            "italian_connection": "Major R&D in Italy",
            "filings_to_extract": ["20-F", "6-K"],
            "focus_areas": ["US revenue", "US customers", "US manufacturing"]
        }
    ]

    return entities

def create_edgar_extraction_urls():
    """Create direct URLs for SEC EDGAR searches."""

    base_url = "https://www.sec.gov/edgar/search/"

    urls = {
        "leonardo_drs": {
            "search_url": "https://www.sec.gov/edgar/browse/?CIK=1698027",
            "latest_10k": "https://www.sec.gov/Archives/edgar/data/1698027/000169802724000004/drs-20231231.htm",
            "all_filings": "https://www.sec.gov/cgi-bin/browse-edgar?action=getcompany&CIK=0001698027"
        },
        "search_queries": [
            {
                "description": "All Italian entity mentions in 2024",
                "url": f"{base_url}#/q=Italy&dateRange=custom&startdt=2024-01-01&enddt=2024-12-31",
                "keywords": ["Italy", "Italian", "Leonardo", "Fincantieri"]
            },
            {
                "description": "Defense contractor foreign ownership",
                "keywords": ["foreign ownership", "FOCI", "security agreement", "proxy agreement"],
                "focus": "Identify Italian-controlled US defense contractors"
            }
        ],
        "subsidiary_searches": [
            "Leonardo DRS",
            "Fincantieri Marine",
            "Thales Alenia Space",
            "Telespazio"
        ]
    }

    return urls

def create_data_extraction_template():
    """Create template for extracting key financial data."""

    template = {
        "entity_name": "",
        "cik": "",
        "filing_type": "",
        "filing_date": "",
        "fiscal_year": "",
        "key_financials": {
            "total_revenue": "",
            "us_government_revenue": "",
            "us_government_percentage": "",
            "backlog": "",
            "major_programs": []
        },
        "italian_connections": {
            "parent_company": "",
            "parent_ownership_pct": "",
            "intercompany_transactions": "",
            "technology_transfers": [],
            "shared_programs": []
        },
        "security_agreements": {
            "foci_mitigation": "",
            "proxy_agreement": "",
            "special_security_agreement": "",
            "facility_clearances": []
        },
        "risk_factors": {
            "foreign_ownership_risks": [],
            "technology_control_risks": [],
            "supply_chain_risks": []
        }
    }

    return template

def generate_extraction_queries():
    """Generate specific data extraction queries."""

    queries = {
        "immediate_extractions": [
            {
                "task": "Leonardo DRS revenue breakdown",
                "url": "https://www.sec.gov/ix?doc=/Archives/edgar/data/1698027/000169802724000004/drs-20231231.htm",
                "extract": [
                    "Total revenue FY2023",
                    "US Army revenue",
                    "US Navy revenue",
                    "Percentage from US government",
                    "Major program list"
                ]
            },
            {
                "task": "Fincantieri US operations",
                "search": "site:sec.gov \"Fincantieri Marine Group\"",
                "extract": [
                    "US shipyard locations",
                    "US Navy contracts",
                    "Employment numbers",
                    "Capital investments"
                ]
            },
            {
                "task": "Italian semiconductor in US",
                "entity": "STMicroelectronics",
                "url": "https://www.sec.gov/edgar/browse/?CIK=932787",
                "extract": [
                    "US manufacturing sites",
                    "US customer concentration",
                    "US R&D spending"
                ]
            }
        ],
        "advanced_searches": [
            {
                "description": "CFIUS reviews of Italian acquisitions",
                "keywords": ["CFIUS", "Italy", "acquisition", "national security"],
                "timeframe": "2020-2025"
            },
            {
                "description": "Italian entities in US critical infrastructure",
                "keywords": ["Italy", "critical infrastructure", "telecommunications", "energy"],
                "filing_types": ["8-K", "10-K", "20-F"]
            }
        ]
    }

    return queries

def create_automated_monitoring_script():
    """Create script for ongoing monitoring of SEC filings."""

    script = """
import requests
import json
from datetime import datetime, timedelta
import time

class SECMonitor:
    def __init__(self):
        self.base_url = "https://data.sec.gov/api/xbrl/companyfacts/"
        self.entities = {
            "Leonardo DRS": "CIK0001698027",
            "STMicroelectronics": "CIK0000932787"
        }

    def check_new_filings(self, cik, days_back=7):
        # Check for new filings in past week
        end_date = datetime.now()
        start_date = end_date - timedelta(days=days_back)

        url = f"https://data.sec.gov/submissions/{cik}.json"
        headers = {'User-Agent': 'OSINT Research (research@example.com)'}

        try:
            resp = requests.get(url, headers=headers)
            data = resp.json()

            recent_filings = []
            for filing in data['filings']['recent']:
                filing_date = datetime.strptime(filing['filingDate'], '%Y-%m-%d')
                if start_date <= filing_date <= end_date:
                    recent_filings.append({
                        'form': filing['form'],
                        'date': filing['filingDate'],
                        'url': f"https://www.sec.gov/Archives/edgar/data/{cik}/{filing['accessionNumber']}"
                    })

            return recent_filings
        except Exception as e:
            print(f"Error checking {cik}: {e}")
            return []

    def extract_key_metrics(self, cik):
        url = f"{self.base_url}{cik}.json"
        headers = {'User-Agent': 'OSINT Research (research@example.com)'}

        try:
            resp = requests.get(url, headers=headers)
            data = resp.json()

            metrics = {}
            # Extract revenue, assets, etc.
            facts = data.get('facts', {}).get('us-gaap', {})

            if 'Revenues' in facts:
                revenues = facts['Revenues']['units']['USD']
                latest_revenue = revenues[-1] if revenues else None
                metrics['latest_revenue'] = latest_revenue

            return metrics
        except Exception as e:
            print(f"Error extracting metrics: {e}")
            return {}

    def run_monitoring(self):
        results = {}
        for name, cik in self.entities.items():
            print(f"Checking {name}...")
            results[name] = {
                'new_filings': self.check_new_filings(cik),
                'metrics': self.extract_key_metrics(cik)
            }
            time.sleep(1)  # Rate limiting

        return results

if __name__ == "__main__":
    monitor = SECMonitor()
    results = monitor.run_monitoring()

    output_file = f"sec_monitoring_{datetime.now().strftime('%Y%m%d')}.json"
    with open(output_file, 'w') as f:
        json.dump(results, f, indent=2)

    print(f"Results saved to {output_file}")
"""

    script_file = OUTPUT_DIR / "sec_edgar_monitor.py"
    with open(script_file, 'w', encoding='utf-8') as f:
        f.write(script)

    return script_file

def create_extraction_checklist():
    """Create actionable checklist for immediate execution."""

    checklist = {
        "immediate_actions": [
            {
                "priority": 1,
                "task": "Download Leonardo DRS latest 10-K",
                "url": "https://www.sec.gov/ix?doc=/Archives/edgar/data/1698027/000169802724000004/drs-20231231.htm",
                "extract": [
                    "Page with 'Revenue by Customer'",
                    "Page with 'Backlog' table",
                    "Risk Factors section",
                    "Related Party Transactions"
                ],
                "time_estimate": "30 minutes"
            },
            {
                "priority": 2,
                "task": "Search for Fincantieri subsidiaries",
                "url": "https://www.sec.gov/edgar/search/",
                "search_terms": [
                    '"Fincantieri Marine Group"',
                    '"Fincantieri Bay Shipbuilding"',
                    '"Marinette Marine"'
                ],
                "time_estimate": "45 minutes"
            },
            {
                "priority": 3,
                "task": "Extract Italian M&A activity",
                "search": "Italy AND (merger OR acquisition OR investment)",
                "date_range": "2023-2025",
                "focus": "Italian companies buying US assets",
                "time_estimate": "1 hour"
            }
        ],
        "data_points_to_extract": [
            "Total US revenue for Italian subsidiaries",
            "US government contract percentages",
            "Number of US employees",
            "US facility locations",
            "Technology transfer agreements",
            "FOCI mitigation measures",
            "Board composition (US vs Italian nationals)",
            "R&D spending in US"
        ]
    }

    return checklist

if __name__ == "__main__":
    print("=" * 60)
    print("SEC EDGAR Italian Entity Analyzer")
    print("=" * 60)

    # Generate queries
    entities = generate_sec_edgar_queries()
    urls = create_edgar_extraction_urls()
    queries = generate_extraction_queries()
    checklist = create_extraction_checklist()

    # Save extraction guide
    guide = {
        "generated": datetime.now().isoformat(),
        "entities": entities,
        "urls": urls,
        "queries": queries,
        "checklist": checklist,
        "template": create_data_extraction_template()
    }

    output_file = OUTPUT_DIR / "sec_edgar_extraction_guide.json"
    with open(output_file, 'w', encoding='utf-8') as f:
        json.dump(guide, f, indent=2)

    print(f"✓ Saved extraction guide to {output_file}")

    # Create monitoring script
    monitor_script = create_automated_monitoring_script()
    print(f"✓ Created monitoring script: {monitor_script}")

    print("\n📋 IMMEDIATE SEC EDGAR TASKS:")
    print("-" * 40)

    for action in checklist["immediate_actions"]:
        print(f"\n{action['priority']}. {action['task']}")
        print(f"   URL: {action['url']}")
        print(f"   Time: {action['time_estimate']}")

    print("\n🎯 KEY TARGETS:")
    print("   • Leonardo DRS (CIK: 0001698027)")
    print("   • Fincantieri Marine Group")
    print("   • STMicroelectronics (CIK: 0000932787)")

    print("\n📊 Critical Data Points:")
    for point in checklist["data_points_to_extract"][:5]:
        print(f"   - {point}")

    print("\n✅ Begin with Leonardo DRS 10-K extraction")
    print("⏱️ Total estimated time: 2-3 hours for complete extraction")
