#!/usr/bin/env python3
"""
Visualize Leonardo DRS Contract Distribution
Creates charts showing contract patterns and dependencies
"""

import pandas as pd
import json
from pathlib import Path
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime

# Set style
plt.style.use('seaborn-v0_8-darkgrid')
sns.set_palette("husl")

# Paths
DATA_DIR = Path("C:/Projects/OSINT - Foresight/data/collected/italy_us/fpds_contracts")
ANALYSIS_FILE = Path("C:/Projects/OSINT - Foresight/data/processed/italy_us_overlap/fpds_contract_analysis.json")
OUTPUT_DIR = Path("C:/Projects/OSINT - Foresight/data/processed/italy_us_overlap/visualizations")
OUTPUT_DIR.mkdir(exist_ok=True)

def create_visualizations():
    """Create comprehensive visualizations of Leonardo DRS contracts."""

    print("=" * 60)
    print("LEONARDO DRS CONTRACT VISUALIZATION")
    print("=" * 60)

    # Load analysis results
    with open(ANALYSIS_FILE, 'r') as f:
        analysis = json.load(f)

    # Create figure with subplots
    fig = plt.figure(figsize=(20, 12))
    fig.suptitle('Leonardo DRS: US Defense Contract Analysis (2020-2025)\n14,514 Total Contracts',
                 fontsize=16, fontweight='bold')

    # 1. Agency Distribution (Pie Chart)
    ax1 = plt.subplot(2, 3, 1)
    agencies = analysis['by_agency']
    top_agencies = dict(list(agencies.items())[:5])
    other_count = sum(list(agencies.values())[5:])
    top_agencies['Others'] = other_count

    colors = ['#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FECA57', '#A8E6CF']
    wedges, texts, autotexts = ax1.pie(top_agencies.values(),
                                        labels=None,
                                        colors=colors,
                                        autopct='%1.1f%%',
                                        startangle=90)

    # Create custom legend with counts
    legend_labels = [f"{k}: {v:,}" for k, v in top_agencies.items()]
    ax1.legend(wedges, legend_labels, title="Agency (Contracts)",
              loc="center left", bbox_to_anchor=(1, 0, 0.5, 1))
    ax1.set_title('Contract Distribution by Agency', fontweight='bold', pad=20)

    # 2. Yearly Trend (Bar Chart)
    ax2 = plt.subplot(2, 3, 2)
    years = list(analysis['by_year'].keys())
    counts = list(analysis['by_year'].values())

    bars = ax2.bar(years, counts, color='#3498db', edgecolor='#2c3e50', linewidth=2)
    ax2.set_xlabel('Year', fontweight='bold')
    ax2.set_ylabel('Number of Contracts', fontweight='bold')
    ax2.set_title('Annual Contract Volume', fontweight='bold', pad=20)
    ax2.grid(axis='y', alpha=0.3)

    # Add value labels on bars
    for bar, count in zip(bars, counts):
        height = bar.get_height()
        ax2.text(bar.get_x() + bar.get_width()/2., height,
                f'{count:,}', ha='center', va='bottom', fontweight='bold')

    # 3. Entity Breakdown (Horizontal Bar)
    ax3 = plt.subplot(2, 3, 3)
    entities = analysis['by_entity']
    entity_names = [name.replace('DRS ', '').replace(', INC.', '') for name in entities.keys()]
    # Extract count values from dict if needed
    entity_counts = [v['count'] if isinstance(v, dict) else v for v in entities.values()]

    y_pos = range(len(entity_names))
    bars = ax3.barh(y_pos, entity_counts, color=['#e74c3c', '#f39c12', '#27ae60', '#8e44ad', '#2980b9'])
    ax3.set_yticks(y_pos)
    ax3.set_yticklabels(entity_names, fontsize=9)
    ax3.set_xlabel('Number of Contracts', fontweight='bold')
    ax3.set_title('Contracts by DRS Entity', fontweight='bold', pad=20)
    ax3.grid(axis='x', alpha=0.3)

    # Add value labels
    for i, (bar, count) in enumerate(zip(bars, entity_counts)):
        ax3.text(count, i, f' {count:,}', va='center', fontweight='bold')

    # 4. Top Product/Service Categories
    ax4 = plt.subplot(2, 3, 4)
    programs = dict(list(analysis['top_programs'].items())[:8])

    # Shorten long names
    short_names = {
        'MAINT/REPAIR/REBUILD OF EQUIPMENT- ELECTRICAL AND ELECTRONIC EQUIPMENT COMPONENTS': 'Equip Maintenance',
        'NIGHT VISION EQUIPMENT, EMITTED AND REFLECTED RADIATION': 'Night Vision',
        'MAINT-REP OF ELECT-ELCT EQ': 'Electronic Repair',
        'SUPPORT- PROFESSIONAL: ENGINEERING/TECHNICAL': 'Engineering Support',
        'MISCELLANEOUS ELECTRIC POWER AND DISTRIBUTION EQUIPMENT': 'Power Equipment',
        'SYSTEMS ENGINEERING SERVICES': 'Systems Engineering',
        'CABLE, CORD, AND WIRE ASSEMBLIES: COMMUNICATION EQUIPMENT': 'Comm Cables',
        'OPTICAL SIGHTING AND RANGING EQUIPMENT': 'Optical/Targeting'
    }

    program_names = [short_names.get(k, k[:20]) for k in programs.keys()]
    program_counts = list(programs.values())

    y_pos = range(len(program_names))
    bars = ax4.barh(y_pos, program_counts, color='#16a085')
    ax4.set_yticks(y_pos)
    ax4.set_yticklabels(program_names, fontsize=9)
    ax4.set_xlabel('Number of Contracts', fontweight='bold')
    ax4.set_title('Top Product/Service Categories', fontweight='bold', pad=20)
    ax4.grid(axis='x', alpha=0.3)

    # Add value labels
    for i, (bar, count) in enumerate(zip(bars, program_counts)):
        ax4.text(count, i, f' {count:,}', va='center', fontweight='bold', fontsize=9)

    # 5. Strategic Importance Text Box
    ax5 = plt.subplot(2, 3, 5)
    ax5.axis('off')

    strategic_text = """STRATEGIC SIGNIFICANCE

• Italian-owned since 2008 ($5.2B acquisition)
• 100% owned by Leonardo S.p.A. (Italy)
• Maintains US security clearances (SSA)
• Critical supplier to US Army (53% of contracts)
• $3+ billion annual US defense revenue

KEY CAPABILITIES:
• Night Vision Systems (1,095 contracts)
• Electronic Warfare Systems
• Fire Control & Targeting
• Naval Radar Systems
• Ground Vehicle Electronics

INTELLIGENCE VALUE:
• Technology transfer pathway to Italy/EU
• Visibility into US military requirements
• Supply chain vulnerability assessment
• Foreign ownership model for others"""

    ax5.text(0.1, 0.9, strategic_text, transform=ax5.transAxes,
            fontsize=10, verticalalignment='top',
            bbox=dict(boxstyle='round', facecolor='wheat', alpha=0.8))

    # 6. Critical Dependencies
    ax6 = plt.subplot(2, 3, 6)

    # Create a simple dependency matrix
    dependencies = {
        'US Army': 7753,
        'US Navy': 1269,
        'DLA': 3143,
        'DISA': 407,
        'SOCOM': 223
    }

    # Calculate criticality score (simplified)
    total = sum(dependencies.values())
    critical_scores = {k: (v/total)*100 for k, v in dependencies.items()}

    names = list(critical_scores.keys())
    scores = list(critical_scores.values())

    bars = ax6.bar(names, scores, color=['red' if s > 30 else 'orange' if s > 10 else 'green' for s in scores])
    ax6.set_ylabel('Dependency Level (%)', fontweight='bold')
    ax6.set_title('Critical Supply Chain Dependencies', fontweight='bold', pad=20)
    ax6.grid(axis='y', alpha=0.3)

    # Add value labels
    for bar, score, count in zip(bars, scores, dependencies.values()):
        height = bar.get_height()
        ax6.text(bar.get_x() + bar.get_width()/2., height,
                f'{score:.1f}%\n({count:,})', ha='center', va='bottom', fontsize=9)

    # Add risk level line
    ax6.axhline(y=30, color='red', linestyle='--', alpha=0.5, label='High Risk Threshold')
    ax6.legend()

    plt.tight_layout()

    # Save visualization
    output_file = OUTPUT_DIR / f"leonardo_drs_analysis_{datetime.now().strftime('%Y%m%d')}.png"
    plt.savefig(output_file, dpi=150, bbox_inches='tight')
    print(f"\n[OK] Visualization saved to: {output_file}")

    # Also save as PDF for reports
    pdf_file = OUTPUT_DIR / f"leonardo_drs_analysis_{datetime.now().strftime('%Y%m%d')}.pdf"
    plt.savefig(pdf_file, format='pdf', bbox_inches='tight')
    print(f"[OK] PDF version saved to: {pdf_file}")

    plt.show()

    return output_file

def create_network_diagram():
    """Create a network diagram showing Leonardo DRS relationships."""

    import networkx as nx

    fig, ax = plt.subplots(figsize=(14, 10))

    # Create graph
    G = nx.Graph()

    # Add nodes
    # Center node
    G.add_node("Leonardo DRS", node_type="center", size=3000)

    # Parent
    G.add_node("Leonardo S.p.A.\n(Italy)", node_type="parent", size=2000)

    # US Government customers
    customers = ["US Army\n(7,753)", "US Navy\n(1,269)", "DLA\n(3,143)", "DISA\n(407)", "SOCOM\n(223)"]
    for customer in customers:
        G.add_node(customer, node_type="customer", size=1000)

    # Capability areas
    capabilities = ["Night Vision", "Electronic\nWarfare", "Fire Control", "Naval Radar", "Ground\nVehicles"]
    for cap in capabilities:
        G.add_node(cap, node_type="capability", size=800)

    # Add edges
    G.add_edge("Leonardo S.p.A.\n(Italy)", "Leonardo DRS", weight=3, label="100% Ownership")

    for customer in customers:
        G.add_edge("Leonardo DRS", customer, weight=2)

    for cap in capabilities:
        G.add_edge("Leonardo DRS", cap, weight=1)

    # Layout
    pos = nx.spring_layout(G, k=2, iterations=50)

    # Draw nodes by type
    node_colors = {
        "center": "#e74c3c",
        "parent": "#3498db",
        "customer": "#27ae60",
        "capability": "#f39c12"
    }

    for node_type, color in node_colors.items():
        nodes = [n for n, d in G.nodes(data=True) if d.get('node_type') == node_type]
        sizes = [G.nodes[n].get('size', 1000) for n in nodes]
        nx.draw_networkx_nodes(G, pos, nodelist=nodes, node_color=color,
                              node_size=sizes, alpha=0.8, ax=ax)

    # Draw edges
    nx.draw_networkx_edges(G, pos, alpha=0.5, width=2, ax=ax)

    # Draw labels
    nx.draw_networkx_labels(G, pos, font_size=9, font_weight='bold', ax=ax)

    # Add title and legend
    ax.set_title("Leonardo DRS: US-Italy Defense Network\nForeign Ownership & Supply Chain Dependencies",
                fontsize=14, fontweight='bold', pad=20)

    # Create legend
    legend_elements = [
        plt.scatter([], [], c='#e74c3c', s=200, label='Leonardo DRS', alpha=0.8),
        plt.scatter([], [], c='#3498db', s=200, label='Italian Parent', alpha=0.8),
        plt.scatter([], [], c='#27ae60', s=200, label='US Customers', alpha=0.8),
        plt.scatter([], [], c='#f39c12', s=200, label='Capabilities', alpha=0.8)
    ]
    ax.legend(handles=legend_elements, loc='upper left')

    ax.axis('off')
    plt.tight_layout()

    # Save network diagram
    network_file = OUTPUT_DIR / f"leonardo_network_{datetime.now().strftime('%Y%m%d')}.png"
    plt.savefig(network_file, dpi=150, bbox_inches='tight')
    print(f"[OK] Network diagram saved to: {network_file}")

    return network_file

if __name__ == "__main__":
    # Create main visualization
    viz_file = create_visualizations()

    # Create network diagram
    network_file = create_network_diagram()

    print("\n" + "=" * 60)
    print("VISUALIZATION COMPLETE")
    print("=" * 60)
    print(f"\nFiles created in: {OUTPUT_DIR}")
    print("\nUse these visualizations to:")
    print("1. Brief leadership on foreign ownership risks")
    print("2. Identify critical supply chain vulnerabilities")
    print("3. Map technology transfer pathways")
    print("4. Assess economic leverage points")
