#!/usr/bin/env python3
"""
Italy-US Intelligence Collection Master Orchestrator
Coordinates all collection activities for immediate exploitation
"""

import json
import subprocess
from datetime import datetime
from pathlib import Path
import webbrowser

class ItalyUSCollector:
    def __init__(self):
        self.base_dir = Path("C:/Projects/OSINT - Foresight")
        self.output_dir = self.base_dir / "data/collected/italy_us"
        self.output_dir.mkdir(parents=True, exist_ok=True)
        self.timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")

    def generate_immediate_collection_tasks(self):
        """Generate prioritized collection tasks for immediate execution."""

        tasks = {
            "priority_1_immediate": [
                {
                    "id": "FPDS_001",
                    "task": "Extract Leonardo DRS federal contracts",
                    "platform": "FPDS.gov",
                    "url": "https://www.fpds.gov/ezsearch/fpdsportal",
                    "query": 'VENDOR_NAME:"Leonardo DRS"',
                    "output": "leonardo_drs_contracts.csv",
                    "estimated_time": "30 min",
                    "value": "HIGH - Direct US government revenue data"
                },
                {
                    "id": "SEC_001",
                    "task": "Leonardo DRS 10-K analysis",
                    "platform": "SEC EDGAR",
                    "url": "https://www.sec.gov/ix?doc=/Archives/edgar/data/1698027/000169802724000004/drs-20231231.htm",
                    "sections": ["Revenue by Customer", "Backlog", "Risk Factors"],
                    "output": "leonardo_drs_10k_extract.json",
                    "estimated_time": "20 min",
                    "value": "HIGH - Financial and program details"
                },
                {
                    "id": "SCOPUS_001",
                    "task": "MIT-Politecnico quantum research",
                    "platform": "Scopus",
                    "url": "https://www.scopus.com/search/form.uri",
                    "query": 'AFFIL(MIT) AND AFFIL("Politecnico di Milano") AND KEY(quantum)',
                    "output": "mit_politecnico_quantum.csv",
                    "estimated_time": "45 min",
                    "value": "HIGH - Technical collaboration mapping"
                }
            ],
            "priority_2_today": [
                {
                    "id": "SAM_001",
                    "task": "Leonardo facility clearances",
                    "platform": "SAM.gov",
                    "url": "https://sam.gov/content/entity-information",
                    "entity": "Leonardo DRS, Inc.",
                    "cage_code": "0Z2Y6",
                    "extract": ["Facility clearance level", "NAICS codes", "Active registrations"],
                    "estimated_time": "15 min"
                },
                {
                    "id": "PATENTS_001",
                    "task": "Leonardo-Boeing joint patents",
                    "platform": "Google Patents",
                    "url": "https://patents.google.com",
                    "query": 'assignee:Leonardo AND assignee:Boeing',
                    "date_range": "2020-2025",
                    "estimated_time": "30 min"
                },
                {
                    "id": "LINKEDIN_001",
                    "task": "Italian researchers at US labs",
                    "platform": "LinkedIn",
                    "search": {
                        "current": "MIT OR Stanford OR Berkeley",
                        "past": "Politecnico di Milano OR Sapienza",
                        "keywords": "quantum OR photonics OR AI"
                    },
                    "estimated_time": "45 min"
                }
            ],
            "priority_3_this_week": [
                {
                    "id": "ORCID_001",
                    "task": "Researcher movement tracking",
                    "platform": "ORCID",
                    "query": 'past:"Politecnico di Milano" current:"MIT"',
                    "estimated_time": "1 hour"
                },
                {
                    "id": "CORDIS_001",
                    "task": "US participation in EU projects",
                    "platform": "CORDIS",
                    "filter": "US organizations in Italian-led projects",
                    "estimated_time": "2 hours"
                },
                {
                    "id": "GITHUB_001",
                    "task": "Leonardo open source contributions",
                    "platform": "GitHub",
                    "query": "org:leonardo user:location:Italy",
                    "focus": "Defense-relevant repositories",
                    "estimated_time": "30 min"
                }
            ]
        }

        return tasks

    def create_collection_dashboard(self):
        """Create HTML dashboard for collection tracking."""

        html_content = """<!DOCTYPE html>
<html>
<head>
    <title>Italy-US Intelligence Collection Dashboard</title>
    <style>
        body {{ font-family: Arial, sans-serif; margin: 20px; background: #f5f5f5; }}
        h1 {{ color: #2c3e50; border-bottom: 3px solid #3498db; padding-bottom: 10px; }}
        .task-card {{ background: white; border-radius: 8px; padding: 15px; margin: 10px 0; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }}
        .priority-1 {{ border-left: 5px solid #e74c3c; }}
        .priority-2 {{ border-left: 5px solid #f39c12; }}
        .priority-3 {{ border-left: 5px solid #3498db; }}
        .task-header {{ display: flex; justify-content: space-between; align-items: center; }}
        .task-id {{ background: #34495e; color: white; padding: 3px 8px; border-radius: 3px; font-size: 12px; }}
        .task-time {{ color: #7f8c8d; font-size: 14px; }}
        .task-value {{ color: #27ae60; font-weight: bold; margin-top: 5px; }}
        .task-url {{ color: #3498db; text-decoration: none; }}
        .task-url:hover {{ text-decoration: underline; }}
        .checkbox {{ width: 20px; height: 20px; margin-right: 10px; }}
        .query-box {{ background: #ecf0f1; padding: 8px; border-radius: 4px; margin: 5px 0; font-family: monospace; font-size: 13px; }}
        .status {{ margin-top: 20px; padding: 15px; background: #fff; border-radius: 8px; }}
        .timestamp {{ color: #95a5a6; font-size: 12px; }}
    </style>
</head>
<body>
    <h1>üéØ Italy-US Intelligence Collection Dashboard</h1>
    <div class="timestamp">Generated: {timestamp}</div>

    <div class="status">
        <h2>üìä Collection Status</h2>
        <p>Total Tasks: <strong>12</strong></p>
        <p>Estimated Total Time: <strong>7-8 hours</strong></p>
        <p>High Value Targets: <strong>3</strong></p>
    </div>

    <h2>üî¥ Priority 1: Immediate (Next 2 Hours)</h2>
    {priority_1_html}

    <h2>üü° Priority 2: Today</h2>
    {priority_2_html}

    <h2>üîµ Priority 3: This Week</h2>
    {priority_3_html}

    <div class="status">
        <h3>Quick Links</h3>
        <ul>
            <li><a href="https://www.fpds.gov/ezsearch/fpdsportal" target="_blank">FPDS.gov</a></li>
            <li><a href="https://www.sec.gov/edgar/search/" target="_blank">SEC EDGAR</a></li>
            <li><a href="https://www.scopus.com" target="_blank">Scopus</a></li>
            <li><a href="https://sam.gov" target="_blank">SAM.gov</a></li>
            <li><a href="https://patents.google.com" target="_blank">Google Patents</a></li>
        </ul>
    </div>

    <script>
        function updateProgress() {{
            const checkboxes = document.querySelectorAll('.checkbox');
            const completed = Array.from(checkboxes).filter(cb => cb.checked).length;
            const total = checkboxes.length;
            console.log(`Progress: ${{completed}}/${{total}} tasks completed`);
        }}
    </script>
</body>
</html>"""

        tasks = self.generate_immediate_collection_tasks()

        def create_task_html(task, priority_class):
            query_html = f'<div class="query-box">{task.get("query", "See platform for query details")}</div>' if "query" in task else ""
            url_html = f'<a href="{task["url"]}" target="_blank" class="task-url">{task["url"]}</a>' if "url" in task else ""

            return f"""
            <div class="task-card {priority_class}">
                <div class="task-header">
                    <div>
                        <input type="checkbox" class="checkbox" onclick="updateProgress()">
                        <span class="task-id">{task['id']}</span>
                        <strong>{task['task']}</strong>
                    </div>
                    <span class="task-time">‚è±Ô∏è {task.get('estimated_time', 'TBD')}</span>
                </div>
                <p>Platform: {task.get('platform', 'N/A')}</p>
                {url_html}
                {query_html}
                <div class="task-value">{task.get('value', '')}</div>
            </div>"""

        priority_1_html = "\n".join([create_task_html(t, "priority-1") for t in tasks["priority_1_immediate"]])
        priority_2_html = "\n".join([create_task_html(t, "priority-2") for t in tasks["priority_2_today"]])
        priority_3_html = "\n".join([create_task_html(t, "priority-3") for t in tasks["priority_3_this_week"]])

        html_final = html_content.format(
            timestamp=datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            priority_1_html=priority_1_html,
            priority_2_html=priority_2_html,
            priority_3_html=priority_3_html
        )

        dashboard_file = self.output_dir / f"collection_dashboard_{self.timestamp}.html"
        with open(dashboard_file, 'w', encoding='utf-8') as f:
            f.write(html_final)

        return dashboard_file

    def create_quick_access_script(self):
        """Create batch script for quick access to all platforms."""

        batch_content = """@echo off
echo ==========================================
echo Italy-US Intelligence Collection Launcher
echo ==========================================
echo.

echo Opening Priority 1 Platforms...

start "" "https://www.fpds.gov/ezsearch/fpdsportal"
timeout /t 2 /nobreak >nul

start "" "https://www.sec.gov/edgar/browse/?CIK=1698027"
timeout /t 2 /nobreak >nul

start "" "https://www.scopus.com/search/form.uri"
timeout /t 2 /nobreak >nul

echo.
echo Priority 1 platforms opened.
echo.

echo Press any key to open Priority 2 platforms...
pause >nul

start "" "https://sam.gov/content/entity-information"
timeout /t 2 /nobreak >nul

start "" "https://patents.google.com"
timeout /t 2 /nobreak >nul

start "" "https://www.linkedin.com/search/"
timeout /t 2 /nobreak >nul

echo.
echo All platforms opened. Begin collection.
echo.

echo Collection Tips:
echo - Start with FPDS Leonardo DRS search
echo - Export all results to CSV
echo - Save to: C:\Projects\OSINT - Foresight\data\collected\italy_us
echo.

pause"""

        script_file = self.output_dir / "launch_collection_platforms.bat"
        with open(script_file, 'w') as f:
            f.write(batch_content)

        return script_file

    def create_collection_tracker(self):
        """Create JSON tracker for collection progress."""

        tracker = {
            "session_id": self.timestamp,
            "started": datetime.now().isoformat(),
            "tasks": self.generate_immediate_collection_tasks(),
            "completed": [],
            "in_progress": [],
            "blocked": [],
            "notes": {},
            "files_collected": [],
            "next_actions": [
                "Complete Priority 1 tasks",
                "Run extraction scripts on collected data",
                "Generate analysis report",
                "Update micro-artifacts"
            ]
        }

        tracker_file = self.output_dir / f"collection_tracker_{self.timestamp}.json"
        with open(tracker_file, 'w', encoding='utf-8') as f:
            json.dump(tracker, f, indent=2)

        return tracker_file

if __name__ == "__main__":
    print("=" * 60)
    print("Italy-US Intelligence Collection Master")
    print("=" * 60)

    collector = ItalyUSCollector()

    # Create dashboard
    dashboard = collector.create_collection_dashboard()
    print(f"[OK] Created collection dashboard: {dashboard}")

    # Create launcher script
    launcher = collector.create_quick_access_script()
    print(f"[OK] Created platform launcher: {launcher}")

    # Create tracker
    tracker = collector.create_collection_tracker()
    print(f"[OK] Created collection tracker: {tracker}")

    print("\nIMMEDIATE ACTIONS:")
    print("-" * 40)

    tasks = collector.generate_immediate_collection_tasks()
    for i, task in enumerate(tasks["priority_1_immediate"], 1):
        print(f"\n{i}. {task['task']}")
        print(f"   ID: {task['id']}")
        print(f"   Platform: {task['platform']}")
        print(f"   Time: {task['estimated_time']}")
        print(f"   Value: {task['value']}")

    print("\nLAUNCH COLLECTION:")
    print(f"   1. Open dashboard: {dashboard}")
    print(f"   2. Run launcher: {launcher}")
    print(f"   3. Track progress: {tracker}")

    print("\nTotal time for Priority 1: ~2 hours")
    print("Save all outputs to: " + str(collector.output_dir))

    # Open dashboard in browser
    try:
        webbrowser.open(str(dashboard))
        print("\nDashboard opened in browser")
    except:
        print(f"\nPlease manually open: {dashboard}")

    print("\nBegin with FPDS Leonardo DRS search!")
    print("Export all results as CSV to the collection folder")
