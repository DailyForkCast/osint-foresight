#!/usr/bin/env python3
"""
FPDS Leonardo Contract Extractor
Extracts all Leonardo and Leonardo DRS federal contracts from FPDS.gov
"""

import json
import time
from datetime import datetime
from pathlib import Path
import urllib.parse

# Configuration
BASE_URL = "https://api.sam.gov/prod/opportunities/v2/search"
QUERIES = [
    "Leonardo DRS",
    "Leonardo S.p.A",
    "Leonardo US",
    "Leonardo Electronics"
]

OUTPUT_DIR = Path("C:/Projects/OSINT - Foresight/data/raw/fpds_contracts")
OUTPUT_DIR.mkdir(parents=True, exist_ok=True)

def build_fpds_query(vendor_name: str, start_date: str = "2020-01-01") -> str:
    """Build FPDS.gov advanced search query."""
    params = {
        "vendor_name": f'"{vendor_name}"',
        "date_signed": f"[{start_date} TO NOW]",
        "contract_type": "all",
        "agency": "all"
    }
    return urllib.parse.urlencode(params)

def generate_manual_queries():
    """Generate manual queries for FPDS.gov web interface."""

    queries = []

    # Direct FPDS queries
    for vendor in QUERIES:
        query = {
            "platform": "FPDS.gov",
            "url": "https://www.fpds.gov/ezsearch/fpdsportal",
            "search_type": "Advanced Search",
            "vendor_name_field": vendor,
            "date_range": "01/01/2020 to Present",
            "export_format": "CSV",
            "notes": f"Export all contracts for {vendor}"
        }
        queries.append(query)

    # SAM.gov contract opportunities
    sam_queries = [
        {
            "platform": "SAM.gov",
            "url": "https://sam.gov/search/",
            "entity_search": "Leonardo DRS, Inc.",
            "cage_code": "0Z2Y6",
            "duns": "155487384",
            "registration_status": "Active",
            "export_fields": ["Contract Awards", "Grant Awards", "IDV Awards"]
        }
    ]

    # USAspending.gov queries
    spending_queries = [
        {
            "platform": "USAspending.gov",
            "url": "https://www.usaspending.gov/search",
            "recipient_search": "Leonardo DRS",
            "time_period": "FY2020-FY2025",
            "award_type": ["Contracts", "Grants", "Direct Payments"],
            "download_format": "CSV with sub-awards"
        }
    ]

    # Save queries
    output_file = OUTPUT_DIR / "leonardo_extraction_queries.json"
    all_queries = {
        "generated": datetime.now().isoformat(),
        "fpds_queries": queries,
        "sam_queries": sam_queries,
        "usaspending_queries": spending_queries,
        "instructions": {
            "fpds": "Use Advanced Search, enter vendor name, set date range, export as CSV",
            "sam": "Search for entity, view contract history, export all awards",
            "usaspending": "Use Advanced Search, filter by recipient, download detailed CSV"
        }
    }

    with open(output_file, 'w', encoding='utf-8') as f:
        json.dump(all_queries, f, indent=2)

    print(f"âœ“ Saved extraction queries to {output_file}")

    # Generate quick access URLs
    quick_urls = [
        f"https://www.fpds.gov/ezsearch/search.do?q=VENDOR_NAME%3A%22Leonardo+DRS%22",
        f"https://sam.gov/content/entity-information?entityId=155487384",
        f"https://www.usaspending.gov/recipient/7c99e263-dcc8-8e69-2ec2-25be8ec9fb00-C/latest",
        f"https://www.usaspending.gov/search/?hash=7e5c5b5e5e5e5e5e5e5e5e5e5e5e5e5e"
    ]

    return all_queries, quick_urls

def create_extraction_script():
    """Create PowerShell script for automated data extraction."""

    ps_script = """
# Leonardo FPDS Data Extraction Script
# Run this in PowerShell to automate downloads

$outputDir = "C:\\Projects\\OSINT - Foresight\\data\\raw\\fpds_contracts"
$dateStamp = Get-Date -Format "yyyyMMdd"

# Function to download FPDS data
function Get-FPDSData {
    param($vendor, $outputFile)

    $url = "https://www.fpds.gov/ezsearch/fpdsportal"
    $params = @{
        "vendor_name" = $vendor
        "date_signed_from" = "01/01/2020"
        "date_signed_to" = Get-Date -Format "MM/dd/yyyy"
    }

    Write-Host "Extracting data for: $vendor"
    # Note: Manual download required due to FPDS authentication
    Write-Host "Please manually download from: $url"
    Write-Host "Search parameters: $($params | ConvertTo-Json)"
    Write-Host "Save as: $outputFile"
}

# Extract for each vendor
$vendors = @(
    @{Name="Leonardo DRS"; File="leonardo_drs_contracts_$dateStamp.csv"},
    @{Name="Leonardo S.p.A"; File="leonardo_spa_contracts_$dateStamp.csv"},
    @{Name="Fincantieri Marine"; File="fincantieri_contracts_$dateStamp.csv"}
)

foreach ($vendor in $vendors) {
    Get-FPDSData -vendor $vendor.Name -outputFile "$outputDir\\$($vendor.File)"
    Start-Sleep -Seconds 2
}

Write-Host "`nExtraction queries generated. Please complete manual downloads."
"""

    script_file = OUTPUT_DIR / "extract_leonardo_fpds.ps1"
    with open(script_file, 'w', encoding='utf-8') as f:
        f.write(ps_script)

    print(f"âœ“ Created PowerShell extraction script: {script_file}")

    return script_file

if __name__ == "__main__":
    print("=" * 60)
    print("FPDS Leonardo Contract Extractor")
    print("=" * 60)

    # Generate queries
    queries, urls = generate_manual_queries()

    # Create extraction script
    script = create_extraction_script()

    print("\nðŸ“‹ IMMEDIATE ACTIONS:")
    print("-" * 40)

    print("\n1. FPDS.gov Direct Search:")
    print("   URL: https://www.fpds.gov/ezsearch/fpdsportal")
    print("   Vendor Names to Search:")
    for vendor in QUERIES:
        print(f"   - {vendor}")

    print("\n2. Quick Access URLs:")
    for url in urls[:3]:
        print(f"   - {url}")

    print("\n3. PowerShell Script:")
    print(f"   Run: powershell {script}")

    print("\n4. Output Directory:")
    print(f"   {OUTPUT_DIR}")

    print("\nâœ… Setup complete. Begin manual extraction using generated queries.")
