#!/usr/bin/env python3
"""
Extract High-Value Programs from Leonardo DRS Contracts
Identifies critical military programs and strategic contracts
"""

import pandas as pd
import json
from pathlib import Path
from datetime import datetime

# Paths
DATA_DIR = Path("C:/Projects/OSINT - Foresight/data/collected/italy_us/fpds_contracts")
OUTPUT_DIR = Path("C:/Projects/OSINT - Foresight/data/processed/italy_us_overlap")

# High-value program keywords
CRITICAL_PROGRAMS = {
    'night_vision': ['night vision', 'thermal', 'flir', 'infrared', 'nv/t', 'nvg'],
    'electronic_warfare': ['electronic warfare', 'ew ', 'jamming', 'countermeasure', 'ecm', 'eccm'],
    'fire_control': ['fire control', 'targeting', 'ballistic', 'gunner', 'fcs'],
    'radar': ['radar', 'aesa', 'synthetic aperture', 'sar '],
    'c4isr': ['c4isr', 'command control', 'situational awareness', 'battle management'],
    'missile_defense': ['missile', 'interceptor', 'air defense', 'counter-uas'],
    'ground_vehicles': ['bradley', 'abrams', 'stryker', 'jltv', 'ampv', 'm1a2'],
    'naval_systems': ['aegis', 'ship ', 'maritime', 'naval', 'submarine', 'destroyer'],
    'aviation': ['helicopter', 'apache', 'blackhawk', 'chinook', 'aircraft'],
    'space': ['satellite', 'space', 'orbital', 'gps']
}

def extract_high_value_programs():
    """Extract and analyze high-value military programs."""

    print("=" * 60)
    print("HIGH-VALUE PROGRAM EXTRACTION")
    print("=" * 60)

    # Load all contracts
    all_contracts = []
    csv_files = list(DATA_DIR.glob("*.csv"))

    for csv_file in csv_files:
        print(f"\nLoading: {csv_file.name}")
        try:
            df = pd.read_csv(csv_file, encoding='utf-8', low_memory=False)
        except:
            df = pd.read_csv(csv_file, encoding='latin-1', low_memory=False)

        df['source_entity'] = csv_file.stem
        all_contracts.append(df)

    combined_df = pd.concat(all_contracts, ignore_index=True)
    print(f"\nTotal contracts: {len(combined_df):,}")

    # Identify columns
    desc_columns = []
    for col in combined_df.columns:
        if any(term in col.lower() for term in ['description', 'naics', 'psc', 'product']):
            desc_columns.append(col)

    print(f"Description columns found: {desc_columns}")

    # Create combined description field
    combined_df['full_description'] = ''
    for col in desc_columns:
        if col in combined_df.columns:
            combined_df['full_description'] += ' ' + combined_df[col].astype(str)

    combined_df['full_description'] = combined_df['full_description'].str.lower()

    # Extract high-value programs
    high_value_programs = {}

    for program_type, keywords in CRITICAL_PROGRAMS.items():
        print(f"\nAnalyzing {program_type.upper()}...")

        # Find matching contracts
        mask = combined_df['full_description'].str.contains('|'.join(keywords), case=False, na=False)
        matching = combined_df[mask]

        if len(matching) > 0:
            high_value_programs[program_type] = {
                'contract_count': len(matching),
                'entities': matching['source_entity'].value_counts().to_dict(),
                'agencies': {},
                'key_contracts': [],
                'technology_areas': set()
            }

            # Get agency distribution if available
            if 'Contracting Agency' in matching.columns:
                agency_dist = matching['Contracting Agency'].value_counts().head(5)
                high_value_programs[program_type]['agencies'] = agency_dist.to_dict()

            # Extract key technology areas
            if 'PSC Description' in matching.columns:
                tech_areas = matching['PSC Description'].value_counts().head(5)
                high_value_programs[program_type]['technology_areas'] = list(tech_areas.index)

            # Get sample contracts
            sample_fields = ['Contract ID', 'Contracting Agency', 'PSC Description', 'Date Signed']
            available_fields = [f for f in sample_fields if f in matching.columns]

            if available_fields:
                samples = matching[available_fields].head(10)
                high_value_programs[program_type]['key_contracts'] = samples.to_dict('records')

            print(f"  Found {len(matching):,} contracts")
            print(f"  Top entity: {matching['source_entity'].value_counts().index[0]}")

    # Identify cross-cutting programs
    print("\n" + "=" * 40)
    print("CROSS-CUTTING ANALYSIS")
    print("-" * 40)

    # Find contracts matching multiple categories
    combined_df['program_count'] = 0
    combined_df['programs'] = ''

    for program_type, keywords in CRITICAL_PROGRAMS.items():
        mask = combined_df['full_description'].str.contains('|'.join(keywords), case=False, na=False)
        combined_df.loc[mask, 'program_count'] += 1
        combined_df.loc[mask, 'programs'] += f'{program_type},'

    multi_program = combined_df[combined_df['program_count'] > 1]
    print(f"Contracts spanning multiple programs: {len(multi_program):,}")

    # Critical program assessment
    critical_assessment = {
        'summary': {
            'total_contracts_analyzed': len(combined_df),
            'high_value_programs_identified': len(high_value_programs),
            'multi_program_contracts': len(multi_program),
            'analysis_date': datetime.now().isoformat()
        },
        'programs': high_value_programs,
        'critical_capabilities': [],
        'strategic_implications': []
    }

    # Identify most critical capabilities
    critical_caps = []
    for prog_type, data in high_value_programs.items():
        if data['contract_count'] > 500:
            critical_caps.append({
                'capability': prog_type,
                'contracts': data['contract_count'],
                'criticality': 'HIGH',
                'primary_customer': list(data.get('agencies', {}).keys())[0] if data.get('agencies') else 'Unknown'
            })

    critical_assessment['critical_capabilities'] = sorted(critical_caps,
                                                         key=lambda x: x['contracts'],
                                                         reverse=True)

    # Strategic implications
    implications = []

    if 'night_vision' in high_value_programs:
        implications.append({
            'area': 'Night Operations',
            'implication': 'Italy has visibility into US night fighting capabilities and requirements',
            'risk_level': 'HIGH'
        })

    if 'electronic_warfare' in high_value_programs:
        implications.append({
            'area': 'Electronic Warfare',
            'implication': 'Potential compromise of EW techniques and countermeasures',
            'risk_level': 'CRITICAL'
        })

    if 'ground_vehicles' in high_value_programs:
        implications.append({
            'area': 'Ground Forces',
            'implication': 'Supply chain dependency for US Army combat vehicles',
            'risk_level': 'HIGH'
        })

    critical_assessment['strategic_implications'] = implications

    # Save results
    output_file = OUTPUT_DIR / "high_value_programs_analysis.json"
    with open(output_file, 'w', encoding='utf-8') as f:
        json.dump(critical_assessment, f, indent=2, default=str)

    print(f"\n[OK] Analysis saved to: {output_file}")

    # Create executive summary
    create_executive_summary(critical_assessment)

    return critical_assessment

def create_executive_summary(assessment):
    """Create an executive summary of high-value programs."""

    summary = f"""# Leonardo DRS High-Value Program Analysis

*Generated: {datetime.now().strftime('%Y-%m-%d %H:%M')}*

## EXECUTIVE SUMMARY

Leonardo DRS is deeply embedded in **{len(assessment['programs'])}** critical US military capability areas with **{assessment['summary']['multi_program_contracts']:,}** contracts spanning multiple programs.

## CRITICAL CAPABILITIES CONTROLLED BY ITALY

"""

    # Add critical capabilities
    for cap in assessment['critical_capabilities'][:5]:
        summary += f"### {cap['capability'].replace('_', ' ').title()}\n"
        summary += f"- **Contracts:** {cap['contracts']:,}\n"
        summary += f"- **Primary Customer:** {cap['primary_customer']}\n"
        summary += f"- **Risk Level:** {cap['criticality']}\n\n"

    summary += "## PROGRAM BREAKDOWN\n\n"

    # Add program details
    for prog_type, data in assessment['programs'].items():
        summary += f"### {prog_type.replace('_', ' ').title()}\n"
        summary += f"- Total Contracts: {data['contract_count']:,}\n"

        if data['agencies']:
            top_agency = list(data['agencies'].keys())[0]
            summary += f"- Primary Agency: {top_agency}\n"

        if data['technology_areas']:
            summary += f"- Key Technologies: {', '.join(data['technology_areas'][:3])}\n"

        summary += "\n"

    summary += "## STRATEGIC IMPLICATIONS\n\n"

    for impl in assessment['strategic_implications']:
        summary += f"### {impl['area']}\n"
        summary += f"- **Risk Level:** {impl['risk_level']}\n"
        summary += f"- **Implication:** {impl['implication']}\n\n"

    summary += """## EXPLOITATION OPPORTUNITIES

1. **Technology Intelligence**: Italy has detailed knowledge of US military capabilities in night vision, targeting, and electronic warfare
2. **Supply Chain Leverage**: Critical dependencies in ground vehicle electronics could be exploited during disputes
3. **Competitive Advantage**: Leonardo S.p.A. can use US program insights to compete globally
4. **Alliance Dynamics**: Italy's defense industry benefits from $3B+ annual US investment

## RECOMMENDED ACTIONS

1. Map alternative suppliers for critical Leonardo DRS components
2. Assess technology transfer risks in current programs
3. Review FOCI mitigation effectiveness
4. Identify single-source vulnerabilities
5. Develop contingency plans for supply disruption

---

*This analysis is based on publicly available FPDS contract data*
"""

    summary_file = OUTPUT_DIR / "high_value_programs_summary.md"
    with open(summary_file, 'w', encoding='utf-8') as f:
        f.write(summary)

    print(f"[OK] Executive summary saved to: {summary_file}")

if __name__ == "__main__":
    extract_high_value_programs()
